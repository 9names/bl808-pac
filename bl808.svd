<?xml version="1.0" encoding="utf-8"?>
<device schemaVersion="1.3" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD.xsd">
  <vendor>Bouffalo Lab</vendor>
  <vendorID>bouffalolab</vendorID>
  <name>BL808</name>
  <series></series> <!-- todo -->
  <version>1.0</version>
  <description>Bouffalo BL808 chip</description>
  <licenseText>
    <!-- todo -->
  </licenseText>
  <addressUnitBits>8</addressUnitBits>
  <width>64</width>
  <size>32</size>
  <access>read-write</access>
  <resetValue>0x00000000</resetValue>
  <resetMask>0xFFFFFFFF</resetMask>
  
  <peripherals>
    <peripheral>
      <name>MMGLB</name>
      <description>Multimedia Global controller</description>
      <baseAddress>0x30007000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <!-- <peripheral derivedFrom="UART[%s]">
      <name>UART3</name>
      <baseAddress>0x30002000</baseAddress>
    </peripheral> -->
    <peripheral>
      <name>EMAC</name>
      <description>Ethernet Media Access Control</description>
      <baseAddress>0x20070000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>AUDIO</name>
      <description>Audio codec controller</description>
      <baseAddress>0x20055000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>USB</name>
      <description>Universal Serial Bus host</description>
      <baseAddress>0x20072000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>HBN</name>
      <description>Hibernate (Deep sleep) control</description>
      <baseAddress>0x2000E000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>PDS</name>
      <description>Power-Down Sleep control</description>
      <baseAddress>0x2000E000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>I2S</name>
      <description>Inter-IC Sound controller</description>
      <baseAddress>0x2000AB00</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>IR</name>
      <description>Infrared Remote module</description>
      <baseAddress>0x2000A600</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>PWM</name>
      <description>Pulse-Width Modulation module</description>
      <baseAddress>0x2000A400</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <dim>2</dim>
      <dimIncrement>0x600</dimIncrement>
      <name>I2C[%s]</name>
      <description>Inter-Integrated Circuit bus</description>
      <baseAddress>0x2000A300</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <dim>1</dim>
      <dimIncrement>0x100</dimIncrement>
      <name>SPI[%s]</name>
      <description>Serial Peripheral Interface</description>
      <baseAddress>0x2000A200</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <dim>2</dim>
      <dimIncrement>0x100</dimIncrement>
      <name>UART[%s]</name>
      <description>Universal Asynchronous Receiver Transmitter</description>
      <baseAddress>0x2000A000</baseAddress>
      <access>read-write</access>
      <addressBlock>
        <offset>0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>transmit_config</name>
          <description>Transmit configuration register</description>
          <addressOffset>0x00</addressOffset>
          <resetValue>0x00001700</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>transfer_length</name>
              <description>Length of words per UART transmit transfer\n\n
This field is ignored when `freerun` mode is enabled.</description>
              <lsb>16</lsb>
              <msb>31</msb>
            </field>
            <field>
              <name>stop_bits</name>
              <description>Number of stop bits</description>
              <lsb>12</lsb>
              <msb>13</msb>
              <!-- todo: how much stop bits is supported? -->
            </field>
            <field>
              <name>word_length</name>
              <description>Bit count for each transmit data word</description>
              <lsb>8</lsb>
              <msb>10</msb>
              <!-- todo: how much bit count is supported? -->
            </field>
            <field>
              <name>ir_inverse</name>
              <description>Inverse transmit signal output in IR mode</description>
              <lsb>7</lsb>
              <msb>7</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>inverse</name>
                  <description>Inverse transmit input in IR mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>no_inverse</name>
                  <description>Don't inverse transmit input in IR mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ir_transmit</name>
              <description>Enable IR transmit mode</description>
              <lsb>6</lsb>
              <msb>6</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable IR transmit mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable IR transmit mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>parity_mode</name>
              <description>Select transmit parity mode if enabled</description>
              <lsb>5</lsb>
              <msb>5</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>odd</name>
                  <description>Odd parity if `parity_enable` is set</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>even</name>
                  <description>Even parity if `parity_enable` is set</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>parity_enable</name>
              <description>Enable transmit parity check</description>
              <lsb>4</lsb>
              <msb>4</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable receive parity check</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable receive parity check</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>freerun</name>
              <description>Enable freerun mode</description>
              <lsb>2</lsb>
              <msb>2</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable freerun mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable freerun mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>cts</name>
              <description>Enable Clear-to-Send flow control signal</description>
              <lsb>1</lsb>
              <msb>1</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable Clear-to-Send flow control signal</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable Clear-to-Send flow control signal</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>function</name>
              <description>Enable transmit function</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable UART receive function signal</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable UART receive function signal</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>receive_config</name>
          <description>Receive configuration register</description>
          <addressOffset>0x04</addressOffset>
          <resetValue>0x00000700</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>transfer_length</name>
              <description>Length of words per UART receive transfer</description>
              <lsb>16</lsb>
              <msb>31</msb>
            </field>
            <field>
              <name>deglitch_cycle</name>
              <description>De-glitch function cycle count</description>
              <lsb>12</lsb>
              <msb>15</msb>
            </field>
            <field>
              <name>deglitch_enable</name>
              <description>Enable receive de-glitch function</description>
              <lsb>11</lsb>
              <msb>11</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable de-glitch function upon receive</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable de-glitch function upon receive</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>word_length</name>
              <description>Bit count for each receive data word</description>
              <lsb>8</lsb>
              <msb>10</msb>
              <!-- todo: how much bit count is supported? -->
            </field>
            <field>
              <name>ir_inverse</name>
              <description>Inverse receive signal output in IR mode</description>
              <lsb>7</lsb>
              <msb>7</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>inverse</name>
                  <description>Inverse receive input in IR mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>no_inverse</name>
                  <description>Don't inverse receive input in IR mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ir_receive</name>
              <description>Enable IR receive mode</description>
              <lsb>6</lsb>
              <msb>6</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable IR receive mode</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable IR receive mode</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>parity_mode</name>
              <description>Select receive parity mode if enabled</description>
              <lsb>5</lsb>
              <msb>5</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>odd</name>
                  <description>Odd parity if `parity_enable` is set</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>even</name>
                  <description>Even parity if `parity_enable` is set</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>parity_enable</name>
              <description>Enable receive parity check</description>
              <lsb>4</lsb>
              <msb>4</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable receive parity check</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable receive parity check</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>auto_baudrate</name>
              <description>Enable receive auto baudrate detection</description>
              <lsb>3</lsb>
              <msb>3</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable auto baudrate upon receive</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable auto baudrate upon receive</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>rts_value</name>
              <description>Value to override Request-to-Send signal if override is enabled</description>
              <lsb>2</lsb>
              <msb>2</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>high</name>
                  <description>Assert Request-to-Send signal</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>low</name>
                  <description>Deassert Request-to-Send signal</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>rts_override</name>
              <description>Enable manual override of Request-to-Send flow control signal</description>
              <lsb>1</lsb>
              <msb>1</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable manual override of Request-to-Send flow control signal</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable manual override of Request-to-Send flow control signal</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>function</name>
              <description>Enable receive function</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable UART receive function signal</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable UART receive function signal</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>bit_period</name>
          <description>Bit period control register</description>
          <addressOffset>0x08</addressOffset>
          <resetValue>0x00ff00ff</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>receive</name>
              <description>Period of each receive bit\n\n
This field relates to baudrate.</description>
              <lsb>16</lsb>
              <msb>31</msb>
            </field>
            <field>
              <name>transmit</name>
              <description>Period of each transmit bit\n\n
This field relates to baudrate.</description>
              <lsb>0</lsb>
              <msb>15</msb>
            </field>
          </fields>
        </register>
        <register>
          <name>data_config</name>
          <description>Data configuration register</description>
          <addressOffset>0x0C</addressOffset>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>bit_order</name>
              <description>Enable bit inverse in each data word</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <enumeratedValue>
                  <name>inverse</name>
                  <description>Each byte is sent out MSB-first</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>no_inverse</name>
                  <description>Each byte is sent out LSB-first</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>transmit_position</name>
          <description>IR-mode transmit position control</description>
          <addressOffset>0x10</addressOffset>
          <resetValue>0x009f0070</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>stop</name>
              <description>Stop position of transmit IR pulse</description>
              <lsb>16</lsb>
              <msb>31</msb>
            </field>
            <field>
              <name>start</name>
              <description>Start position of transmit IR pulse</description>
              <lsb>0</lsb>
              <msb>15</msb>
            </field>
          </fields>
        </register>
        <register>
          <name>receive_position</name>
          <description>IR-mode receive position control</description>
          <addressOffset>0x14</addressOffset>
          <resetValue>0x0000006f</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>start</name>
              <description>Start position of received pulse recovered from IR signal</description>
              <lsb>0</lsb>
              <msb>15</msb>
            </field>
          </fields>
        </register>
        <register>
          <name>receive_timeout</name>
          <description>Receive Time-Out interrupt control</description>
          <addressOffset>0x18</addressOffset>
          <resetValue>0x0000000f</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>value</name>
              <description>Timeout interrupt triggering value by bits received</description>
              <!-- todo: what's 'bit time'? -->
              <lsb>0</lsb>
              <msb>7</msb>
            </field>
          </fields>
        </register>
        <register>
          <name>interrupt_state</name>
          <description>Interrupt state register</description>
          <addressOffset>0x20</addressOffset>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>receive_fifo_error</name>
              <description>Receive FIFO overflow or underflow occurred</description>
              <lsb>7</lsb>
              <msb>7</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <name>InterruptState</name>
                <enumeratedValue>
                  <name>has_interrupt</name>
                  <description>Has interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>no_interrupt</name>
                  <description>No interrupt occurred</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>transmit_fifo_error</name>
              <description>Transmit FIFO overflow or underflow occurred</description>
              <lsb>6</lsb>
              <msb>6</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptState" />
            </field>
            <field>
              <name>receive_parity</name>
              <description>Receive parity check failure occurred</description>
              <lsb>5</lsb>
              <msb>5</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptState" />
            </field>
            <field>
              <name>receive_timeout</name>
              <description>Receive timed-out interrupt occurred</description>
              <lsb>4</lsb>
              <msb>4</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptState" />
            </field>
            <field>
              <name>receive_fifo_ready</name>
              <description>Receive FIFO ready signal raised</description>
              <lsb>3</lsb>
              <msb>3</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptState" />
            </field>
            <field>
              <name>transmit_fifo_ready</name>
              <description>Transmit FIFO ready signal raised</description>
              <lsb>2</lsb>
              <msb>2</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptState" />
            </field>
            <field>
              <name>receive_transfer</name>
              <description>Receive transfer finish signal raised</description>
              <lsb>1</lsb>
              <msb>1</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptState" />
            </field>
            <field>
              <name>transmit_transfer</name>
              <description>Transmit transfer finish signal raised</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptState" />
            </field>
          </fields>
        </register>
        <register>
          <name>interrupt_mask</name>
          <description>Interrupt mask register</description>
          <addressOffset>0x24</addressOffset>
          <resetValue>0x000000ff</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>receive_fifo_error</name>
              <description>Receive FIFO overflow or underflow interrupt mask</description>
              <lsb>7</lsb>
              <msb>7</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <name>InterruptMask</name>
                <enumeratedValue>
                  <name>mask</name>
                  <description>Mask interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>unmask</name>
                  <description>Unmask interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>transmit_fifo_error</name>
              <description>Transmit FIFO overflow or underflow interrupt mask</description>
              <lsb>6</lsb>
              <msb>6</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptMask" />
            </field>
            <field>
              <name>receive_parity</name>
              <description>Receive parity check failure interrupt mask</description>
              <lsb>5</lsb>
              <msb>5</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptMask" />
            </field>
            <field>
              <name>receive_timeout</name>
              <description>Receive timed-out interrupt mask</description>
              <lsb>4</lsb>
              <msb>4</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptMask" />
            </field>
            <field>
              <name>receive_fifo_ready</name>
              <description>Receive FIFO ready signal interrupt mask</description>
              <lsb>3</lsb>
              <msb>3</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptMask" />
            </field>
            <field>
              <name>transmit_fifo_ready</name>
              <description>Transmit FIFO ready signal interrupt mask</description>
              <lsb>2</lsb>
              <msb>2</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptMask" />
            </field>
            <field>
              <name>receive_transfer</name>
              <description>Receive transfer finish signal interrupt mask</description>
              <lsb>1</lsb>
              <msb>1</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptMask" />
            </field>
            <field>
              <name>transmit_transfer</name>
              <description>Transmit transfer finish signal interrupt mask</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptMask" />
            </field>
          </fields>
        </register>
        <register>
          <name>interrupt_clear</name>
          <description>Clear interrupt register</description>
          <addressOffset>0x28</addressOffset>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>write-only</access>
          <fields>
            <field>
              <name>receive_parity</name>
              <description>Write 1 to clear receive parity check failure</description>
              <lsb>5</lsb>
              <msb>5</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <name>InterruptClear</name>
                <enumeratedValue>
                  <name>clear</name>
                  <description>Write 1 to clear interrupt state</description>
                  <value>0x1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>receive_timeout</name>
              <description>Write 1 to clear receive timed-out</description>
              <lsb>4</lsb>
              <msb>4</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptClear" />
            </field>
            <field>
              <name>receive_transfer</name>
              <description>Write 1 to clear receive transfer finish signal</description>
              <lsb>1</lsb>
              <msb>1</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptClear" />
            </field>
            <field>
              <name>transmit_transfer</name>
              <description>Write 1 to clear transmit transfer finish signal</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptClear" />
            </field>
          </fields>
        </register>
        <register>
          <name>interrupt_enable</name>
          <description>Interrupt enable register</description>
          <addressOffset>0x2C</addressOffset>
          <resetValue>0x000000ff</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>receive_fifo_error</name>
              <description>Receive FIFO overflow or underflow interrupt enable</description>
              <lsb>7</lsb>
              <msb>7</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <name>InterruptEnable</name>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable interrupt</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable interrupt</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>transmit_fifo_error</name>
              <description>Transmit FIFO overflow or underflow interrupt enable</description>
              <lsb>6</lsb>
              <msb>6</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptEnable" />
            </field>
            <field>
              <name>receive_parity</name>
              <description>Receive parity check failure interrupt enable</description>
              <lsb>5</lsb>
              <msb>5</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptEnable" />
            </field>
            <field>
              <name>receive_timeout</name>
              <description>Receive timed-out interrupt enable</description>
              <lsb>4</lsb>
              <msb>4</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptEnable" />
            </field>
            <field>
              <name>receive_fifo_ready</name>
              <description>Receive FIFO ready signal interrupt enable</description>
              <lsb>3</lsb>
              <msb>3</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptEnable" />
            </field>
            <field>
              <name>transmit_fifo_ready</name>
              <description>Transmit FIFO ready signal interrupt enable</description>
              <lsb>2</lsb>
              <msb>2</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptEnable" />
            </field>
            <field>
              <name>receive_transfer</name>
              <description>Receive transfer signal interrupt enable</description>
              <lsb>1</lsb>
              <msb>1</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptEnable" />
            </field>
            <field>
              <name>transmit_transfer</name>
              <description>Transmit transfer signal interrupt enable</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="InterruptEnable" />
            </field>
          </fields>
        </register>
        <register>
          <name>bus_state</name>
          <description>Bus state register</description>
          <addressOffset>0x30</addressOffset>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>receive_busy</name>
              <description>Indicates that UART receive bus is busy</description>
              <lsb>1</lsb>
              <msb>1</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <name>BusBusy</name>
                <enumeratedValue>
                  <name>busy</name>
                  <description>Bus is busy</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>idle</name>
                  <description>Bus is not busy</description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>transmit_busy</name>
              <description>Indicates that UART transmit bus is busy</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="BusBusy" />
            </field>
          </fields>
        </register>
        <register>
          <name>auto_baudrate</name>
          <description>Auto baudrate detection register</description>
          <addressOffset>0x34</addressOffset>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>by_five_five</name>
              <description>Bit period of auto baudrate detection using codeword 0x55</description>
              <lsb>16</lsb>
              <msb>31</msb>
            </field>
            <field>
              <name>by_start_bit</name>
              <description>Bit period of auto baudrate detection using start bit</description>
              <lsb>0</lsb>
              <msb>15</msb>
            </field>
          </fields>
        </register>
        <register>
          <name>fifo_config_0</name>
          <description>FIFO configuration register 0</description>
          <addressOffset>0x80</addressOffset>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>receive_underflow</name>
              <description>Receive FIFO underflow flag\n\n
Can be cleared using `receive_clear`.</description>
              <lsb>7</lsb>
              <msb>7</msb>
              <access>read-only</access>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <name>HasUnderflow</name>
                <enumeratedValue>
                  <name>not_underflow</name>
                  <description>No FIFO buffer underflow</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>underflow</name>
                  <description>Has FIFO buffer underflow</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>receive_overflow</name>
              <description>Receive FIFO overflow flag\n\n
Can be cleared using `receive_clear`.</description>
              <lsb>6</lsb>
              <msb>6</msb>
              <access>read-only</access>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <name>HasOverflow</name>
                <enumeratedValue>
                  <name>not_overflow</name>
                  <description>No FIFO buffer overflow</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>overflow</name>
                  <description>Has FIFO buffer overflow</description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>transmit_underflow</name>
              <description>Transmit FIFO underflow flag\n\n
Can be cleared using `transmit_clear`.</description>
              <lsb>5</lsb>
              <msb>5</msb>
              <access>read-only</access>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="HasUnderflow" />
            </field>
            <field>
              <name>transmit_overflow</name>
              <description>Transmit FIFO overflow flag\n\n
Can be cleared using `transmit_clear`.</description>
              <lsb>4</lsb>
              <msb>4</msb>
              <access>read-only</access>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="HasOverflow" />
            </field>
            <field>
              <name>receive_clear</name>
              <description>Clears receive FIFO overflow and underflow flags</description>
              <lsb>3</lsb>
              <msb>3</msb>
              <access>write-only</access>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <name>FlagClear</name>
                <enumeratedValue>
                  <name>clear</name>
                  <description>Write 1 to clear fifo flags</description>
                  <value>0x1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>transmit_clear</name>
              <description>Clears transmit FIFO overflow and underflow flags</description>
              <lsb>2</lsb>
              <msb>2</msb>
              <access>write-only</access>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="FlagClear" />
            </field>
            <field>
              <name>receive_dma</name>
              <description>Enable signal of receive DMA interface</description>
              <lsb>1</lsb>
              <msb>1</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues>
                <name>DmaEnable</name>
                <enumeratedValue>
                  <name>enable</name>
                  <description>Enable DMA interface</description>
                  <value>0x1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>disable</name>
                  <description>Disable DMA interface</description>
                  <value>0x0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>transmit_dma</name>
              <description>Enable signal of transmit DMA interface</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <writeConstraint>
                <useEnumeratedValues>true</useEnumeratedValues>
              </writeConstraint>
              <enumeratedValues derivedFrom="DmaEnable" />
            </field>
          </fields>
        </register>
        <register>
          <name>fifo_config_1</name>
          <description>FIFO configuration register 1</description>
          <addressOffset>0x84</addressOffset>
          <resetValue>0x00000020</resetValue>
          <resetMask>0xffffffff</resetMask>
          <fields>
            <field>
              <name>receive_threshold</name>
              <description>Receive FIFO threshold\n\n
DMA request will not be asserted if `receive_available` is less than this value</description>
              <lsb>24</lsb>
              <msb>28</msb>
            </field>
            <field>
              <name>transmit_threshold</name>
              <description>Transmit FIFO threshold\n\n
DMA request will not be asserted if `receive_available` is less than this value</description>
              <lsb>16</lsb>
              <msb>20</msb>
            </field>
            <field>
              <name>receive_available</name>
              <description>Count of available data in receive FIFO</description>
              <lsb>8</lsb>
              <msb>13</msb>
              <access>read-only</access>
            </field>
            <field>
              <name>transmit_available</name>
              <description>Count of available data in transmit FIFO</description>
              <lsb>0</lsb>
              <msb>5</msb>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>data_write</name>
          <description>FIFO write data register</description>
          <addressOffset>0x88</addressOffset>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>write-only</access>
          <fields>
            <field>
              <name>value</name>
              <description>Write data to FIFO</description>
              <lsb>0</lsb>
              <msb>7</msb>
            </field>
          </fields>
        </register>
        <register>
          <name>data_read</name>
          <description>FIFO read data register</description>
          <addressOffset>0x8C</addressOffset>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xffffffff</resetMask>
          <access>read-only</access>
          <fields>
            <field>
              <name>value</name>
              <description>Read data from FIFO</description>
              <lsb>0</lsb>
              <msb>7</msb>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>EFUSE</name>
      <description>eFuse memory control</description>
      <baseAddress>0x20056000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>SEC</name>
      <description>Secure Engine</description>
      <baseAddress>0x20004000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>GPIP</name>
      <description>Generic DAC, ADC and ACOMP interface control</description>
      <baseAddress>0x20002000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x400</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>GLB</name>
      <description>Global register</description>
      <baseAddress>0x20000000</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x1000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>todo</name>
          <description>??</description>
          <addressOffset>0</addressOffset>
          <fields>
            <!-- todo: fields -->
          </fields>
        </register>
      </registers>
    </peripheral>
  </peripherals>
</device>
