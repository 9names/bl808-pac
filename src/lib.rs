#![doc = "Peripheral access API for BL808 microcontrollers (generated using svd2rust v0.28.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.28.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {}
#[doc(hidden)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 0] = [];
#[doc = "Codec miscellaneous control"]
pub struct CODEC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CODEC {}
impl CODEC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const codec::RegisterBlock = 0x3002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const codec::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CODEC {
    type Target = codec::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CODEC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CODEC").finish()
    }
}
#[doc = "Codec miscellaneous control"]
pub mod codec;
#[doc = "Always-On function control"]
pub struct AON {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AON {}
impl AON {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const aon::RegisterBlock = 0x2000_f800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const aon::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AON {
    type Target = aon::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AON").finish()
    }
}
#[doc = "Always-On function control"]
pub mod aon;
#[doc = "Camera Control Interface"]
pub struct CCI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CCI {}
impl CCI {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cci::RegisterBlock = 0x2000_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cci::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CCI {
    type Target = cci::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CCI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CCI").finish()
    }
}
#[doc = "Camera Control Interface"]
pub mod cci;
#[doc = "EF_DATA"]
pub struct EF_DATA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EF_DATA {}
impl EF_DATA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ef_data::RegisterBlock = 0x2005_6000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ef_data::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EF_DATA {
    type Target = ef_data::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EF_DATA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EF_DATA").finish()
    }
}
#[doc = "EF_DATA"]
pub mod ef_data;
#[doc = "Global configuration register"]
pub struct GLB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GLB {}
impl GLB {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const glb::RegisterBlock = 0x2000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const glb::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GLB {
    type Target = glb::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GLB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GLB").finish()
    }
}
#[doc = "Global configuration register"]
pub mod glb;
#[doc = "Generic DAC, ADC and ACOMP interface control"]
pub struct GPIP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIP {}
impl GPIP {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpip::RegisterBlock = 0x2000_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpip::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIP {
    type Target = gpip::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIP").finish()
    }
}
#[doc = "Generic DAC, ADC and ACOMP interface control"]
pub mod gpip;
#[doc = "Hibernate (Deep sleep) control"]
pub struct HBN {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HBN {}
impl HBN {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hbn::RegisterBlock = 0x2000_f000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hbn::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HBN {
    type Target = hbn::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HBN {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HBN").finish()
    }
}
#[doc = "Hibernate (Deep sleep) control"]
pub mod hbn;
#[doc = "Inter-processor Channel"]
pub struct IPC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IPC {}
impl IPC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ipc::RegisterBlock = 0x2000_a800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ipc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IPC {
    type Target = ipc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IPC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IPC").finish()
    }
}
#[doc = "Inter-processor Channel"]
pub mod ipc;
#[doc = "Chip Miscellaneous control"]
pub struct MISC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MISC {}
impl MISC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const misc::RegisterBlock = 0x2000_9000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const misc::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MISC {
    type Target = misc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MISC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MISC").finish()
    }
}
#[doc = "Chip Miscellaneous control"]
pub mod misc;
#[doc = "Sleep control (Power-down sleep?)"]
pub struct PDS_BASE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PDS_BASE {}
impl PDS_BASE {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pds_base::RegisterBlock = 0x2000_e000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pds_base::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PDS_BASE {
    type Target = pds_base::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PDS_BASE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PDS_BASE").finish()
    }
}
#[doc = "Sleep control (Power-down sleep?)"]
pub mod pds_base;
#[doc = "Pseudo Static Random Access Memory control"]
pub struct PSRAM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PSRAM {}
impl PSRAM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const psram::RegisterBlock = 0x2005_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const psram::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PSRAM {
    type Target = psram::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PSRAM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSRAM").finish()
    }
}
#[doc = "Pseudo Static Random Access Memory control"]
pub mod psram;
#[doc = "Secure Digital host control"]
pub struct SDH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDH {}
impl SDH {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdh::RegisterBlock = 0x2006_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdh::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDH {
    type Target = sdh::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDH").finish()
    }
}
#[doc = "Secure Digital host control"]
pub mod sdh;
#[doc = "Quad Serial Flash control"]
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const flash::RegisterBlock = 0x2000_b000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
#[doc = "Quad Serial Flash control"]
pub mod flash;
#[doc = "Trust zone isolation"]
pub struct TZC_SEC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TZC_SEC {}
impl TZC_SEC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tzc_sec::RegisterBlock = 0x2000_5000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tzc_sec::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TZC_SEC {
    type Target = tzc_sec::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TZC_SEC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TZC_SEC").finish()
    }
}
#[doc = "Trust zone isolation"]
pub mod tzc_sec;
#[doc = "Trust zone isolation 2"]
pub struct TZC_NSEC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TZC_NSEC {}
impl TZC_NSEC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tzc_nsec::RegisterBlock = 0x2000_6000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tzc_nsec::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TZC_NSEC {
    type Target = tzc_nsec::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TZC_NSEC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TZC_NSEC").finish()
    }
}
#[doc = "Trust zone isolation 2"]
pub mod tzc_nsec;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "CODEC"]
    pub CODEC: CODEC,
    #[doc = "AON"]
    pub AON: AON,
    #[doc = "CCI"]
    pub CCI: CCI,
    #[doc = "EF_DATA"]
    pub EF_DATA: EF_DATA,
    #[doc = "GLB"]
    pub GLB: GLB,
    #[doc = "GPIP"]
    pub GPIP: GPIP,
    #[doc = "HBN"]
    pub HBN: HBN,
    #[doc = "IPC"]
    pub IPC: IPC,
    #[doc = "MISC"]
    pub MISC: MISC,
    #[doc = "PDS_BASE"]
    pub PDS_BASE: PDS_BASE,
    #[doc = "PSRAM"]
    pub PSRAM: PSRAM,
    #[doc = "SDH"]
    pub SDH: SDH,
    #[doc = "FLASH"]
    pub FLASH: FLASH,
    #[doc = "TZC_SEC"]
    pub TZC_SEC: TZC_SEC,
    #[doc = "TZC_NSEC"]
    pub TZC_NSEC: TZC_NSEC,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            CODEC: CODEC {
                _marker: PhantomData,
            },
            AON: AON {
                _marker: PhantomData,
            },
            CCI: CCI {
                _marker: PhantomData,
            },
            EF_DATA: EF_DATA {
                _marker: PhantomData,
            },
            GLB: GLB {
                _marker: PhantomData,
            },
            GPIP: GPIP {
                _marker: PhantomData,
            },
            HBN: HBN {
                _marker: PhantomData,
            },
            IPC: IPC {
                _marker: PhantomData,
            },
            MISC: MISC {
                _marker: PhantomData,
            },
            PDS_BASE: PDS_BASE {
                _marker: PhantomData,
            },
            PSRAM: PSRAM {
                _marker: PhantomData,
            },
            SDH: SDH {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            TZC_SEC: TZC_SEC {
                _marker: PhantomData,
            },
            TZC_NSEC: TZC_NSEC {
                _marker: PhantomData,
            },
        }
    }
}
